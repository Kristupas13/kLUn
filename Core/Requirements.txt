// Data types

Boolean
true; // Not false Boolean
false; // Not *not* false Boolean

Decimal
1234; // An integer
12.34 // A decimal number

String
"I am a string";
""; // empty string;
"123"; // This is a string, not a number

Null
nil;

// Expressions

Arithmetic (Binary)
add + me;
subtract - me;
multiply * me;
divide / me;

Comparison and equality
less < than;
lessThan < orEqual;
greater > than;
greaterThan >= orEqual;
1 == 2; // false
"cat" != "dog" // true
314 == "pi" // false
123 == "123" // false

Logical operators
!true // false
!false // true
true and false // false
true or false // true

Precendence and grouping
var average = (min + max) / 2;

// Statements

print "Hello, world";
{
  print "First statement";
  print "Second statement";
}
var imAVariable = "test";
var iAmNil;
if (condition) {
	print "yes";
} else {
	print "no";
}
var a = 1;
while(a < 10) {
	print a;
	a = a + 1; // maybe a++;
}
for (var a = 1; i < 10; i = i + 1) {
	print a;
}
fun printSum(a, b) {
	print a + b;
}
[ // scope for the example
fun addPair(a, b) {
	return a + b;
}

fun identity(a) {
	return a;
}

print identity(addPair)(1, 2); // Prints "3".
] // end scope for example
[ // scope for the example
fun returnFunction() {
	var outside = "outside";

	fun inner() {
	print outside;
	}

	return inner;
}

var fn = returnFunction();
fn();
] // end scope for example
[ // scope for the example
class Breakfast {
  init(meat, bread) {
    this.meat = meat;
    this.bread = bread;
  }

  // ...
}

var baconAndToast = Breakfast("bacon", "toast");
baconAndToast.serve("Dear Reader");
] // end scope for example
[ // scope for the example
class Brunch < Breakfast {
  init(meat, bread, drink) {
    super.init(meat, bread);
    this.drink = drink;
  }
}
] // end scope for example